//SOMITCWS JOB (xxxxxxxx,xxxx,1439,9999,9999),SAVEPSWD-SOMITCW,
//             CLASS=x,MSGCLASS=x,
//             NOTIFY=SOMITCW,COND=(0,NE)
//SAVEPSWD EXEC HLASMCL,PARM.C=(NODECK,OBJECT,RENT),
//             PARM.L='REFR,RENT,REUS,AC=1,LIST,MAP'
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.MODGEN,DISP=SHR
//         DD  DSN=SYS1.SORCPROD,DISP=SHR  For the VCCS CVTUSER DSECT
//* SYS1.SORCPROD must be after MACLIB with the WTO macro in it
PASS     TITLE 'SAVEPSWD - Copies ACF2 ids/Pswd from CSA to Data Set'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*   Title: SAVEPSWD
*
*   Author: I ain't saying.
*
*   Date-written:  1998-10-26
*
*   Change Log:
*
* xx-xx-xx x
*  x.x.x.
*
*   Remarks:
*
*        Copies the ACF2 userids and passwords from ECSA
*   to a data set.  A new table in ECSA is acquired.
*   The old table is freed.
*
*
* Attributes:  AMODE 31, RMODE ANY, RENT
*
* Input:  ACF2 Log on ID and Password table in ECSA
* Outputs: Data set SYS1.SAVEPSWD
*          A new empty table in ECSA
*
* Sample JCL:
* //SAVEPSWD EXEC PGM=SAVEPSWD,TIME=9999
* //OUTPUT   DD  DSN=SYS1.SAVEPSWD,DISP=MOD
* //SYSUDUMP DD  SYSOUT=*
*
*  R9  = CVT Address
*  R8  = CVTUSER Area Address
*  R7  = Password Save Area Start Address
*  R6  = Address of the Current Save Password Entry
*  R5  = Address after the last save Password table Entry
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
SAVEPSWD CSECT ,
SAVEPSWD AMODE 31
SAVEPSWD RMODE ANY
         SAVE  (14,12),,SAVEPSWD.&SYSDATE..&SYSTIME Save caller's regs.
         LR    R12,R15            Load address of entry point
         USING SAVEPSWD,R12       Give assembler program's base reg.
         GETMAIN R,LV=SAVESIZE,LOC=BELOW  Get storage to put DCB in
         XC    0(SAVESIZE,R1),0(R1)  Clear the save/work area
         ST    R1,8(,R13)         Save new save area addr.in old area
         ST    R13,4(,R1)         Save old save area addr.in new area
         LR    R13,R1             Replace old save area with new one
         USING SAVEAREA,R13       Tell assembler about save area
         MVC   DCB(DCBASIZE),DUMDCB Copy proto DCB, DCBE, Parm-list
         LA    R1,DCB+DCBSIZE     Find DCBE location
         ST    R1,DCB             Store DCBE address in DCB
         LA    R1,DCB+DCBSIZE2    Find Open/Close parameter list
         OPEN  (DCB,EXTEND),MODE=31,MF=(E,(1)) Open OUTPUT as DISP=MOD
*  Note: Early OPEN was for less of a chance of abending after
*        partially modifing CVTUSER, SAVEPW area, etc.
         L     R9,16              Load the address of the CVT
         ICM   R8,B'1111',CVTUSER-CVT(R9)  Address CVTUSER points to
         USING XCVTUSER,R8        Tell assembler about dsect
         BNZ   GOTUSER            Have CVTUSER, go process it
* else, get a CVTUSER area
         MODESET KEY=ZERO         Get key zero for CVT storage
         LTR   R15,R15            See if MODESET worked
         BNZ   NOKEY0             Cannot get key zero, go exit
         GETMAIN RU,LV=XCVTUSIZ,SP=245 Get 48 byte CVTUSER SQA area
*                                 CSA would make more sense than SQA,
*                                 but someday we may need fixed storage
* Warning:  The area pointed to by the CVTUSER field is used both by
*           LGNIXIT and MPF program IOS000I.
         LR    R8,R1              Save address of storage gotten
         XC    XCVTUSER(XCVTUSIZ),XCVTUSER  Clear CVTUSER pointed area
         MVC   XCVTUEYE,CCVTUSER  Move 'CVTUSERn' to CVTUSER area
         SLR   R7,R7              Clear a register for the 'CS' inst.
* CS - If R7 and CVTUSER are equal, then R8 is stored in CVTUSER
* CS - If R7 and CVTUSER are not equal, then CVTUSER is loaded to R7
         CS    R7,R8,CVTUSER-CVT(R9)  Set CVTUSER address in CVT
         BE    KEYNZERO           Got CVTUSER now, go back to non-0 key
* Some other user put CVTUSER in CVT first, free the new one
         FREEMAIN RU,LV=XCVTUSIZ,A=(R8),SP=245  Free extra SQA storage
         LR    R8,R7              Use the first CVTUSER area address
KEYNZERO DS    0H
         MODESET KEY=NZERO        Back to user key
GOTUSER  DS    0H
         CLC   XCVTUEYE,CCVTUSER  See if the CVTUSER area is mine
         BNE   BADUSERA           If someone else has CVTUSER, go tell
         ICM   R7,B'1111',XCVTPSWD  Load address for Password save area
         USING SAVEPW,R7          Tell assembler about DSECT
         BZ    OLDZERO            No address, must be first time/IPL
         CLC   EYECATCH,CLGNIXIT  See if the save area starts okay
         BNE   BADANCH            Bad CVT Anchor, should not occur
OLDZERO  DS    0H
* Need new ACF2 user id and password table
         MODESET MODE=SUP,KEY=ZERO  Get supervisor for ECSA Getmain
         LTR   R15,R15            See if MODESET worked
         BNZ   NOSUP              Cannot get key zero, go exit
         SETLOCK OBTAIN,TYPE=CPU,REGS=STDSAVE  Get lock for GETMAIN
         GETMAIN RU,LV=32700,SP=231,KEY=8,BRANCH=(YES,GLOBAL)
*                                 Get password storage in ECSA
         LR    R7,R1              Save address of new password area
         SETLOCK RELEASE,TYPE=CPU,REGS=STDSAVE  Release lock
         MODESET KEY=NZERO        Get to user key for normal stuff
         MVC   EYECATCH,CLGNIXIT  Put eye catcher in pswd save area
         LA    R1,ENTRIES         Calculate address to put entries
         ST    R1,NEXTSAVE        Set the first entry address
         A     R1,TWENTY4K        Find near-end-of-table address
         ST    R1,NEARFULL        Set the near-end-of-table address
         A     R1,EIGHTK          Find end-of-table address
         ST    R1,FULL            Set the near-end-of-table address
         MODESET KEY=ZERO         Get key zero for CVT storage
         LTR   R15,R15            See if MODESET worked
         BNZ   NOKEY0             Cannot get key zero, go exit
         L     R6,XCVTPSWD        Save  address of old table
         ST    R7,XCVTPSWD        Store address of new table
         DROP  R8                 Don't need CVTUSER address anymore
         MODESET KEY=NZERO        Get to user key for normal stuff
         LTR   R7,R6              See if a previous table
         BZ    RETURN             If no previous table, go exit
         LA    R6,ENTRIES         Load address of first entry written
         L     R5,NEXTSAVE        Load address after last entry written
LOOP     DS    0H
         CR    R6,R5              See if table all entries dumped
         BNL   DATAEND            At end, go close the file
         PUT   DCB,(R6)           Write a table entry
         LA    R6,ENTRYSZ(,R6)    Bump to next entry
         B     LOOP               Go back to process next entry
DATAEND  DS    0H
         FREEMAIN RU,LV=32700,SP=231,A=(R7)  Free storage in ECSA
         DROP  R7                 Save Password Area Addr. freed
         MODESET MODE=PROB        Back to problem state
RETURN   DS    0H
         LA    R1,DCB+DCBSIZE2    Find OPEN/CLOSE Parameter list addr.
         CLOSE DCB,MODE=31,MF=(E,(1))  Close the output DCB
         LR    R1,R13             Save old save area addr. for FREEMAIN
         L     R13,4(,R13)        Restore old save area address
         FREEMAIN R,LV=SAVESIZE,A=(1)  Release save and DCB storage
         SLR   R15,R15            Set a return code of zero
         RETURN (14,12),RC=(15)   Return to caller, return code zero
*
NOSUP    DS    0H
         WTO   'Program SAVEPSWD MODESET Supervisor failed',ROUTCDE=11
         B     RETURN             Exit the exit quick
*
NOKEY0   DS    0H
         WTO   'Program SAVEPSWD MODESET key zero failed',ROUTCDE=11
         B     RETURN             Exit the exit quick
*
BADUSERA DS    0H
         WTO   'Program SAVEPSWD found a bad CVTUSER area',ROUTCDE=11
         ABEND 3001,DUMP          Abend with a dump
*
BADANCH  DS    0H
         WTO   'Program SAVEPSWD found a bad ANCHOR area',ROUTCDE=11
         ABEND 3002,DUMP          Abend with a dump
*
CCVTUSER DC    CL7'CVTUSER',XL1'1' Constant to init and check CVTUSER
CLGNIXIT DC    CL7'LGNIXIT',XL1'1' Constant to init and check SAVEPW
TWENTY4K DC    A(ENTRYSZ*750)     Constant to warn near end of table
EIGHTK   DC    A(ENTRYSZ*250)     Constant to warn at end of table
*
*
         DS    0D                 Insure a double word alignment
DUMDCB   DCB   DDNAME=OUTPUT,DSORG=PS,MACRF=PM,RECFM=FB,LRECL=ENTRYSZ, X
               DCBE=*-*
DCBSIZE  EQU   *-DUMDCB           Size of OUTPUT DCB
DUMDCBE  DCBE  RMODE31=BUFF       DCBE for the OUTPUT DCB
DCBSIZE2 EQU   *-DUMDCB           Size of OUTPUT DCB and DCBE
DUMOCPL  OPEN  (*-*),MF=L,MODE=31 OPEN/CLOSE parameter list
DCBASIZE EQU   *-DUMDCB           Size of DCB, DCBE, PARM-LIST Area
*
SAVEAREA DSECT ,                  Register save area and work area
         DS    18F                Register save area
DCB      DS    XL(DCBASIZE)       DCB, DCBE, and O/C parm-list
SAVESIZE EQU   *-SAVEAREA         Save and work area size
*
         COPY  CVTUSER            VCCS user DSECT in SYS1.SORCPROD
*
* XCVTUSER DSECT ,
* XCVTUEYE DS    CL8              7 bytes of 'CVTUSER' and 1 byte X'01'
* XCVTUVOL DS    XL6              VOLSER from message used by IEC507D
*          DS    XL2              Space available for expansion
* XCVTUTIM DS    XL6              CYYDDDHHMMSS Century, Year,Day, Hour,
*                                 Minute, and Second, used by IOS000I
*          DS    XL2              Space available for expansion
* XCVTPSWD DS    F                ACF2 LGNIXIT anchor, used by PSWDSAVE
*          DS    XL20             Space available for expansion
* XCVTUSIZ EQU   *-XCVTUSER       Length of area pointed to by CVTUSER
*
*
*
SAVEPW   DSECT ,
EYECATCH DS    CL8                7 bytes of 'LGNIXIT' and 1 byte X'01'
NEXTSAVE DS    F                  Address of current available entry
NEARFULL DS    F                  Addr. of end of 75% pswd storage area
FULL     DS    F                  Addr. of end of password storage area
ENTRIES  DS    XL32680            Location to save passwords in
ENTRYSZ  EQU   32                 Thirty-Two bytes per entry
SAVEPWSZ EQU   *-SAVEPW           Length of the password entry storage
*
         IHAPSA ,                 Prefix Storage Area
*
         CVT   DSECT=YES          MVS's Communications Vector Table
*
R0       EQU   0
R1       EQU   1                  R
R2       EQU   2                    E
R3       EQU   3                      G
R4       EQU   4                        I
R5       EQU   5                          S
R6       EQU   6                            T
R7       EQU   7                              E
R8       EQU   8                                R
R9       EQU   9                  E
R10      EQU   10                   Q
R11      EQU   11                     U
R12      EQU   12                       A
R13      EQU   13                         T
R14      EQU   14                           E
R15      EQU   15                             S
         END   ,
//L.SYSLMOD DD DSN=SYS1.LOADPROD,DISP=SHR,SPACE=
 NAME SAVEPSWD
